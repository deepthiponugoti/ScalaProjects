import scala.math.Ordering.Implicits._
object RodCutter {

  def getOptimalCutsForSplit(split: Int, length: Int, prices: Map[Int, Int]): (Int, List[List[Int]])= {
    val resultForFirstSplit = getOptimalCuts(split, prices)
    val resultForSecondSplit = getOptimalCuts(length - split, prices)
    val revenue = resultForFirstSplit._1 + resultForSecondSplit._1
    val permutationOfBothCuts =
      for (cutFromTheTupleOfSplit <- resultForFirstSplit._2; cutFromTheTupleOfLengthMinusSplit <- resultForSecondSplit._2) yield
      (cutFromTheTupleOfSplit ::: cutFromTheTupleOfLengthMinusSplit)

    (revenue, permutationOfBothCuts)
  }

  def maxOfTwoCuts(firstCut: (Int, List[List[Int]]), secondCut: (Int, List[List[Int]])): (Int, List[List[Int]]) = {
    firstCut._1 match {
      case _ if firstCut._1 > secondCut._1 => firstCut
      case _ if firstCut._1 == secondCut._1 => (firstCut._1, firstCut._2 ::: secondCut._2)
      case _ => secondCut
    }
  }

//Venkat: Remove this function. Use distinct direclty in to remove the duplicates instead of using removeDuplicatesFromCuts
  def removeDuplicatesFromCuts(cut: (Int, List[List[Int]])): (Int, List[List[Int]]) = {
    val listOfCutsSorted = cut._2.map(i => i.sorted)
    (cut._1, listOfCutsSorted.sorted.distinct)
  }

  def getOptimalCuts(length: Int, prices: Map[Int, Int]) : (Int, List[List[Int]]) = {
    length match {
      case _ if length <= 0 => (0, List(List()))
      case _ =>
      //Venkat: This is ahrd to read. Remove unnecessary type information to foldLeft. Remove getorElse, etc. from here. Reduce clutter.
                val combinedListWithMaxRevenue = Stream.range(1, length).foldLeft[(Int, List[List[Int]])](prices.getOrElse(length, 0), List(List(length))) {
                  (list, i) => maxOfTwoCuts(list, getOptimalCutsForSplit(i, length, prices))
                }

        removeDuplicatesFromCuts(combinedListWithMaxRevenue)
    }
  }
}