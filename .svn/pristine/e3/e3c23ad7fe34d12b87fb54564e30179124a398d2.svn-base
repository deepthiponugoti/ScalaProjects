import scala.math.Ordering.Implicits._

object RodCutter {

  def getOptimalCutsForSplit(split: Int, length: Int, prices: Map[Int, Int]): (Int, List[List[Int]])= {
    val resultForFirstSplit = getOptimalCuts(split, prices)
    val resultForSecondSplit = getOptimalCuts(length - split, prices)
    val revenue = resultForFirstSplit._1 + resultForSecondSplit._1
    val permutationOfBothCuts =
      for (cutFromTheTupleOfSplit <- resultForFirstSplit._2; cutFromTheTupleOfLengthMinusSplit <- resultForSecondSplit._2) yield
      (cutFromTheTupleOfSplit ::: cutFromTheTupleOfLengthMinusSplit) //Venkat: call sorted here

    (revenue, permutationOfBothCuts)
  }

  def maxOfCuts(firstCut: (Int, List[List[Int]]), secondCut: (Int, List[List[Int]])): (Int, List[List[Int]]) = {
    firstCut._1 match {
      case _ if firstCut._1 > secondCut._1 => firstCut
      case _ if firstCut._1 == secondCut._1 => (firstCut._1, firstCut._2 ::: secondCut._2)
      case _ => secondCut
    }
  }

  def getOptimalCuts(length: Int, prices: Map[Int, Int]) : (Int, List[List[Int]]) = {
    length match {
      case _ if length <= 0 => (0, List(List()))
      case _ =>
	      val profitAndCutOfGivenLength = (prices.getOrElse(length, 0), List(List(length)))
        val combinedListWithMaxRevenue = Stream.range(1, length).foldLeft(profitAndCutOfGivenLength) {
                  (maxOfLastTwoCuts, i) => maxOfCuts(maxOfLastTwoCuts, getOptimalCutsForSplit(i, length, prices)) //Venkat: i to split
        }
        val listOfCutsSorted = combinedListWithMaxRevenue._2.map(cuts => cuts.sorted) //Venkat: Remove this (after adding sorted on the top)
        (combinedListWithMaxRevenue._1, listOfCutsSorted.sorted.distinct) //Venkat: is sorted needed here?
    }
  }
}