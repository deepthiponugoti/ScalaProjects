require_relative "../src/rod_cutter"
require 'test/unit'

class RodCutterTest < Test::Unit::TestCase
	
	@@prices = {1 => 1, 2 => 2, 3 => 3, 4 => 4}

	def test_canary
    	assert_true(true)
  	end
  
  	def test_get_optimal_cuts_for_length_zero
		expected = [0, [[]]]
		assert_equal(expected, RodCutter.new.get_optimal_cuts(0, @@prices))	
  	end
  
  	def test_get_optimal_cuts_for_length_one
		expected = [1, [[1]]]
		assert_equal(expected, RodCutter.new.get_optimal_cuts(1, @@prices))
	end  

	def test_get_optimal_cuts_for_length_two
		expected = [2, [[2], [1, 1]]]
		assert_equal(expected, RodCutter.new.get_optimal_cuts(2, @@prices))
	end 

	def test_get_optimal_cuts_for_length_three
		expected = [3, [[3], [1, 2], [1, 1, 1]]]
		assert_equal(expected, RodCutter.new.get_optimal_cuts(3, @@prices))
	end  

	def test_get_optimal_cuts_for_length_four
		expected = [4, [[4], [1, 3], [1, 1, 2], [1, 1, 1, 1], [2, 2]]]
		assert_equal(expected, RodCutter.new.get_optimal_cuts(4, @@prices))
	end  

	def test_for_get_optimal_cuts_for_pricelist_where_solution_doesnot_include_length_itself
		expected = [8, [[2, 2]]]
		assert_equal(expected, RodCutter.new.get_optimal_cuts(4, {1 => 1, 2 => 4, 3 => 4, 4 => 5}))
	end

	def test_for_get_optimal_cuts_for_pricelist_where_some_prices_are_missing
		expected = [10, [[1, 1, 3, 3]]]
		assert_equal(expected, RodCutter.new.get_optimal_cuts(8, {1 => 1, 3 => 4, 5 => 5, 7 => 7}))
	end

end