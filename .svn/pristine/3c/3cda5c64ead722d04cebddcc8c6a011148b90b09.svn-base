import scala.annotation.tailrec

class FibonacciSeries {

  def fibonacciRecursion(position: Int): List[Int] = {
    position match {
      case 0 => List(1)
      case 1 => List(1, 1)
      case _ if position < 0 => List()
      case _ => {
        val listAtPositionMinusOne = fibonacciRecursion(position - 1)
        listAtPositionMinusOne :+ listAtPositionMinusOne.takeRight(2).sum
      }
    }
  }

  @tailrec
  final def fibonacciTailRecursion(position: Int, listOfNumbers: List[Int]): List[Int] = {

    val returnList = listOfNumbers.length match {
      case 0 => List(1)
      case _ => listOfNumbers
    }

    position match {
      case 0 => returnList
      case _ if position < 0 => List()
      case _ => fibonacciTailRecursion(position - 1, returnList :+ returnList.takeRight(2).sum)
    }
  }
}