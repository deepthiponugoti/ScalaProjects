Homework 2: Due 11:59PM October 16

What is referential transparency? Discuss. What are the benefits. Give examples.

Referential Transparency is where a compiler can replace a call to a method with the result of the method call if the input is same. 

For example, consider 'squareOfNumber' function

int squareOfNumber(int n)
{
	return n * n; 
}

We can see that if we send exactly the same input to the function 'squareOfNumber' it would return the same output, no matter the number of times the function  is called. This is possible because it is not affected by any outside environment ( i.e., function value is independent of outside variables ),  and is also not influenced by the outside context. So, the compiler can replace the method call with its return value, which refers to referentially transparent. 

Expressions with functions involved in them can be referentially transparent only if the involved functions are pure functions. Pure functions is a function that has no side effects. A function or expression is said to have a side effect if it modifies some state or has an observable interaction with calling functions or the outside environment. 

Benefits of referential transparency are:

1.  As referential transparency expressions or functions don’t have side effects, so it does-not matter whether you calculate it now or later. This helps in applying program transformations including code optimization and partial evaluations at compile-time. It also supports concurrent executions, parallelization which are useful while performing compiler optimizations.

2. They are easy to test as it takes an input and gives an output. Writing unit test cases for these type of functions is easy when compared to the functions where mutability happens.

3. Only referentially transparent functions can be memorized i.e., they can be transformed into equivalent functions which cache results, which also helps in code optimization.

4. It also helps in lazy evaluation, which means that expressions are not evaluated when they are bound to variables, but their evaluation is deferred until their results are needed by other computations. 

Consider the following examples:

Example 1:
int totalSurfaceAreaOfCuboid(int length, int breadth, int height){
	
	return lateralSurfaceAreaOfCuboid(length, breadth, height) + 2 * AreaOfRectangle(length, breadth);
}

int lateralSurfaceAreaOfCuboid(int length, int breadth, int height){
	return 2*( length * height + width * height);
}

int AreaOfRectangle( int length, int breadth)
{
	return length * breadth;
}

The expression 'lateralSurfaceAreaOfCuboid(length, breadth, height) + 2 * AreaOfRectangle(length, breadth)' is referentially transparent as the function calls involved in it 'lateralSurfaceAreaOfCuboid' and 'AreaOfRectangle' are both pure functions as they don’t have any side effects. This makes the expression, function referentially transparent.

Example 2:

int perimeterOfQuadrilateral(int side1, int side2, int side3, int side4)
{
	return side1 + side2 + side3 + side4;
}
 In the above example for evaluating the expression 'side1 + side2 + side3 + size4' , it can be evaluated in either of the following ways
	i)	t1 = side1 + side2, t2 = side3 + side4 , t3 = t1 + t2
	ii) t4 = side3 + side4, t5 = side1 + side2, t6 = t4 + t5
	
	In either of the case it evaluates to the same value as it is a referentially transformed expression. They can even compute in parallel and help in compiler optimization 




