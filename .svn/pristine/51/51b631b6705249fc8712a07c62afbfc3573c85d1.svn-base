import org.junit.Assert._
import org.junit.Test

class RodCutterTest{

  val prices = Map(1 ->1, 2 -> 5, 3 -> 7, 4 -> 8) //Venkat: give space after ->
  val rodCutter = new RodCutter()

	@Test
	def testCanary = {
		assertTrue(true)
	}

	@Test
	def testgetOptimalCutsForZeroLength= {
		val expected = Map("revenue" -> 0, "cuts" -> List(List())) //Venkat: how about val expected = (0, List(List())) - tuple instead of Map
		assertEquals(expected, rodCutter.getOptimalCuts(0, prices))
	}
	
	@Test
	def testgetOptimalCutsForOneLength= {
		val expected = Map("revenue" -> 1, "cuts" -> List(List(1)))
		assertEquals(expected, rodCutter.getOptimalCuts(1, prices))
	}
	
	@Test
	def testgetOptimalCutsForOneLengthIfPriceIsNotPresent= {
		val expected = Map("revenue" -> 0, "cuts" -> List(List())) //Venkat: Incorrect. Don't jump to this yet. We can come to this later. Move to length 2. Use the prices example I gave in the email.
		assertEquals(expected, rodCutter.getOptimalCuts(7, prices))
	}
}